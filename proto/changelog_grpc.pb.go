// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChangelogServiceClient is the client API for ChangelogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangelogServiceClient interface {
	GetChangelog(ctx context.Context, in *ChangelogRequest, opts ...grpc.CallOption) (*ChangelogResponse, error)
}

type changelogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChangelogServiceClient(cc grpc.ClientConnInterface) ChangelogServiceClient {
	return &changelogServiceClient{cc}
}

func (c *changelogServiceClient) GetChangelog(ctx context.Context, in *ChangelogRequest, opts ...grpc.CallOption) (*ChangelogResponse, error) {
	out := new(ChangelogResponse)
	err := c.cc.Invoke(ctx, "/proto.ChangelogService/GetChangelog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangelogServiceServer is the server API for ChangelogService service.
// All implementations must embed UnimplementedChangelogServiceServer
// for forward compatibility
type ChangelogServiceServer interface {
	GetChangelog(context.Context, *ChangelogRequest) (*ChangelogResponse, error)
	mustEmbedUnimplementedChangelogServiceServer()
}

// UnimplementedChangelogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChangelogServiceServer struct {
}

func (UnimplementedChangelogServiceServer) GetChangelog(context.Context, *ChangelogRequest) (*ChangelogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangelog not implemented")
}
func (UnimplementedChangelogServiceServer) mustEmbedUnimplementedChangelogServiceServer() {}

// UnsafeChangelogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangelogServiceServer will
// result in compilation errors.
type UnsafeChangelogServiceServer interface {
	mustEmbedUnimplementedChangelogServiceServer()
}

func RegisterChangelogServiceServer(s grpc.ServiceRegistrar, srv ChangelogServiceServer) {
	s.RegisterService(&ChangelogService_ServiceDesc, srv)
}

func _ChangelogService_GetChangelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangelogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangelogServiceServer).GetChangelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChangelogService/GetChangelog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangelogServiceServer).GetChangelog(ctx, req.(*ChangelogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangelogService_ServiceDesc is the grpc.ServiceDesc for ChangelogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangelogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChangelogService",
	HandlerType: (*ChangelogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChangelog",
			Handler:    _ChangelogService_GetChangelog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/changelog.proto",
}
